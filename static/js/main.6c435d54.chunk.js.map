{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","cats","map","cat","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredCats","filter","toLocaleLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAeeA,EAbF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BL,GAA1B,OAA+BA,EAA/B,eACzB,6BACC,4BAAKC,GACL,2BAAIC,MCYOI,EAlBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACC,6BACEA,EAAKC,KAAI,SAACC,EAAKC,GAEH,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIS,EAAIT,GACRC,KAAMQ,EAAIR,KACVC,MAAOO,EAAIP,aCEpBU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKV,UAAU,WACd,2BACCA,UAAU,oCACVW,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCCCI,EARA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,sBACvDtB,EAAMuB,WCgEJC,E,YAtDd,aAAgB,IAAD,8BAEd,+CAoBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAnB1C,EAAKC,MAAQ,CACZvB,KAAc,GACdoB,YAAc,IAND,E,iFAUO,IAAD,OAEpBI,MAAM,8CACJC,MAAK,SAACC,GAEN,OAAOA,EAASC,UAEhBF,MAAK,SAACG,GACN,EAAKT,SAAS,CAAEnB,KAAM4B,S,+BASf,MAEqBC,KAAKN,MAA3BvB,EAFC,EAEDA,KAAMoB,EAFL,EAEKA,YAERU,EAAe9B,EAAK+B,QAAO,SAAC7B,GACjC,OAAOA,EAAIR,KAAKsC,oBAAoBC,SAASb,EAAYY,wBAG1D,OAAKhC,EAAKkC,OAIR,yBAAKtC,UAAU,MACd,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWU,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,KAAM8B,KAEjB,4BAAQlC,UAAU,WACjB,8DAVI,wBAAIA,UAAU,SAAd,qB,GAtCQuC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.6c435d54.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst { id, name, email } = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='cat photos' src={`https://robohash.org/${id}${id}?set=set4`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cats }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cats.map((cat, i) => {\r\n\t\t\t\t//when you do loop, you have to give it a unique key.\r\n                return (\r\n                    <Card\r\n                        key={i} \r\n                        id={cat.id} \r\n                        name={cat.name} \r\n                        email={cat.email} \r\n                    />\r\n                );\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2 mb3'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--yellow bg-washed-yellow'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search for cats'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', height: '800px', border: '1px solid #ff9900' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\n// import { cats } from './cats';\r\n\r\n// // the description of what our state should be.\r\n// const state = {\r\n// \tcats        : cats,\r\n// \tsearchField : '',\r\n// };\r\n\r\n// it extends the Component(short hand)/React.Component class\r\nclass App extends Component {\r\n\t// adding state\r\n\tconstructor () {\r\n\t\t// calling super() since we're extending a component class.\r\n\t\tsuper();\r\n\t\t// the description of what our state should be. state is changeable, props are not.\r\n\t\tthis.state = {\r\n\t\t\tcats        : [],\r\n\t\t\tsearchField : '',\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\t// it means go to this link and fetch users from json placeholder by using this link.\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => {\r\n\t\t\t\t// change this response to object by using \".json()\",\r\n\t\t\t\treturn response.json();\r\n\t\t\t}) // then we'll get the users\r\n\t\t\t.then((users) => {\r\n\t\t\t\tthis.setState({ cats: users });\r\n\t\t\t});\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t\t// use this.state.cats to access state\r\n\t};\r\n\r\n\trender () {\r\n\t\t// destructuring\r\n\t\tconst { cats, searchField } = this.state;\r\n\r\n\t\tconst filteredCats = cats.filter((cat) => {\r\n\t\t\treturn cat.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n\t\t});\r\n\r\n\t\tif (!cats.length) {\r\n\t\t\treturn <h1 className='tc f1'>Loading . . .</h1>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>CatsColony</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList cats={filteredCats} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t<footer className='pt5 pb4'>\r\n\t\t\t\t\t\t<div>&copy; 2019 | Made with love!</div>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}